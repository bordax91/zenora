'use client'

import { useEffect, useState } from 'react'
import { supabase } from '@/lib/supabase/client'

export default function AuthCallback() {
  const [error, setError] = useState(null)

  useEffect(() => {
    const run = async () => {
      try {
        console.log('üîÑ [AuthCallback] D√©but du process...')

        const url = new URL(window.location.href)
        console.log('üìå URL compl√®te re√ßue :', url.toString())

        const search = new URLSearchParams(url.search)
        const oauthError = search.get('error_description') || search.get('error')
        const code = search.get('code')
        const state = search.get('state')

        console.log('üìå Query params -> code:', code, 'state:', state)

        // ‚õî Erreur OAuth d√©tect√©e
        if (oauthError) {
          console.error('‚ùå [OAuth ERROR]', oauthError)
          setError(oauthError)
          return
        }

        // ‚õî Pas de code/state ‚Üí inutile de continuer
        if (!code || !state) {
          console.warn('‚ö†Ô∏è Pas de code ou state trouv√©, arr√™t.')
          return
        }

        // üåê √âchange du code OAuth contre une session Supabase
        console.log('üîë [AuthCallback] Tentative √©change code ‚Üí session Supabase...')
        const { error: exchangeErr } = await supabase.auth.exchangeCodeForSession(window.location.href)
        if (exchangeErr) {
          console.error('‚ùå [exchangeCodeForSession error]', exchangeErr)
          throw exchangeErr
        }
        console.log('‚úÖ Session √©chang√©e avec succ√®s !')

        // üë§ R√©cup√©ration de l‚Äôutilisateur
        const { data: userData, error: userErr } = await supabase.auth.getUser()
        if (userErr || !userData?.user) {
          console.error('‚ùå [getUser error]', userErr)
          throw new Error("Impossible de r√©cup√©rer l‚Äôutilisateur.")
        }

        const user = userData.user
        console.log('üë§ Utilisateur r√©cup√©r√© :', user)

        // üéØ R√¥le depuis localStorage (ou fallback client)
        const role = localStorage.getItem('pendingRole') || 'client'
        console.log('üéØ R√¥le trouv√© :', role)

        // üîê Mise √† jour metadata c√¥t√© Supabase
        console.log('‚úèÔ∏è Mise √† jour du metadata utilisateur...')
        await supabase.auth.updateUser({ data: { role } })
        console.log('‚úÖ Metadata mis √† jour')

        // üóìÔ∏è P√©riode d‚Äôessai gratuite (7 jours)
        const trialStart = new Date()
        const trialEnd = new Date(trialStart)
        trialEnd.setDate(trialStart.getDate() + 7)

        console.log('üóìÔ∏è P√©riode d‚Äôessai :', trialStart.toISOString(), '‚Üí', trialEnd.toISOString())

        // üíæ Insertion/m√†j dans `users`
        console.log('üíæ Upsert dans la table users...')
        const { error: upsertErr } = await supabase
          .from('users')
          .upsert(
            {
              id: user.id,
              email: user.email,
              role,
              trial_start: trialStart.toISOString(),
              trial_end: trialEnd.toISOString(),
              is_subscribed: false,
            },
            { onConflict: 'id' }
          )

        if (upsertErr) {
          console.error('‚ùå [upsert error]', upsertErr)
          throw upsertErr
        }
        console.log('‚úÖ Utilisateur ins√©r√©/mis √† jour dans users')

        // ‚úÖ D√©termination de la redirection
        const storedRedirect = localStorage.getItem('pendingRedirect')
        const isSafePath = (path) => path?.startsWith('/') && !path.startsWith('//')
        const redirectTo =
          (storedRedirect && isSafePath(storedRedirect) && storedRedirect) ||
          (role === 'coach' ? '/coach/onboarding' : '/client/dashboard')

        console.log('‚û°Ô∏è Redirection pr√©vue vers :', redirectTo)

        // üßπ Nettoyage localStorage
        localStorage.removeItem('pendingRole')
        localStorage.removeItem('pendingRedirect')
        localStorage.removeItem('pendingTrialStart')
        localStorage.removeItem('pendingTrialEnd')
        localStorage.setItem('isLoggedIn', 'true')

        // üöÄ Redirection manuelle
        window.location.replace(redirectTo)
      } catch (e) {
        console.error('‚ùå [auth/callback ERROR]', e)
        setError(e?.message || 'Erreur de connexion. Veuillez r√©essayer.')
      }
    }

    run()
  }, [])

  return (
    <div className="min-h-screen flex items-center justify-center text-gray-600 text-center px-4">
      {error || 'Connexion en cours...'}
    </div>
  )
}
